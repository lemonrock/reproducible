#!/usr/bin/env sh
# This file is part of reproducible-rust. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/reproducible-rust/master/COPYRIGHT. No part of reproducible-rust, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright © 2021 The developers of reproducible-rust. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/reproducible-rust/master/COPYRIGHT.


set -e
set -u
set -f

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				local recursionDepth=0
				_program_path_resolve_symlinks_recursively()
				{
					local unresolvedPath="$1"
					
					recursionDepth=$((recursionDepth + 1))
					
					if [ $recursionDepth -gt 10 ]; then
						printf '%s\n' 'Recursion to depths greater than 10 is not allowed when resolving links.'
						return 1
					fi
					
					local potentialLinkDestination="$(readlink -- "$unresolvedPath")"
					
					if [ -z "$potentialLinkDestination" ]; then
						scriptPath="$unresolvedPath"
						return 0
					fi
					local linkDestination="$potentialLinkDestination"
					local parentFolderPath="${unresolvedPath%/*}"
					
					if [ "$parentFolderPath" = "$unresolvedPath" ]; then
						_program_path_resolve_symlinks_recursively "$linkDestination"
					else
						case "$linkDestination" in
														
							/*)
								_program_path_resolve_symlinks_recursively "$linkDestination"
							;;
							
							*)
								_program_path_resolve_symlinks_recursively "$parentFolderPath"/"$linkDestination"
							;;
							
						esac
					fi
				}

				scriptPath="$0"
				_program_path_resolve_symlinks_recursively "$scriptPath"

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

cd "$(_program_path_find)" 1>/dev/null 2>/dev/null

. functions/common.sh
. functions/common.outside-docker.sh
. functions/rust.sh


prepare()
{
	clean_folder "$download_folder_path"
}

download_using_curl_or_wget()
{
	local url="$1"
	local destination_folder_path="$2"
	local file_name="$3"
	
	# Mac OS X using homebrew has a version of curl that supports TLS 1.3.
	if [ -x /usr/local/opt/curl/bin/curl ]; then
		local PATH=/usr/local/opt/curl/bin:"$PATH"
	fi
	
	if command -v curl 1>/dev/null 2>/dev/null; then
		printf 'Downloading %s to %s using curl… ' "$url" "$destination_folder_path" 1>&2
		cd "$destination_folder_path" 1>/dev/null 2>/dev/null
			set +e
				curl --silent --fail --proto '=https' --http2 --tlsv1.3 --output "$file_name" "$url"
				local exit_code=$?
			set -e
			case $exit_code in
				
				0)
					printf 'done\n' 1>&2
				;;
				
				22)
					printf 'not found (may be expected for platform)\n' 1>&2
				;;
				
				*)
					exit_temporary_fail_message "failed"
				;;
				
			esac
		cd - 1>/dev/null 2>/dev/null
	elif command -v wget 1>/dev/null 2>/dev/null; then
		printf 'Downloading %s to %s using wget… ' "$url" "$destination_folder_path" 1>&2
		exit_system_file_message "wget is not yet supported"
	else
		exit_system_file_message "Neither curl nor wget is on the PATH"
	fi
}

download_url()
{
	local url="$1"
	local relative_folder_path="$2"
	local target_folder="$3"
	
	local file_name="${url##*/}"
	
	local folder_path="$download_folder_path"/"$target_folder"/"$relative_folder_path"
	mkdir -m 0700 -p "$folder_path"
	download_using_curl_or_wget "$url" "$folder_path" "$file_name"
}

depends chmod
download_rustup_init()
{
	local target_triple="$1"
	
	case "$target_triple" in
		
		*-windows-*)
			local extension='.exe'
		;;
		
		*)
			local extension=''
		;;
		
	esac
	
	local relative_folder_path=rustup/archive/"$rustup_version"/"$target_triple"
	local relative_file_path="$relative_folder_path"/rustup-init${extension}
	
	download_url https://"$distribution_server"/"$relative_file_path" "$relative_folder_path" "$target_triple"
	download_url https://"$distribution_server"/"$relative_file_path".sha256 "$relative_folder_path" "$target_triple"
	# There is no `.asc` file.
	
	chmod +x "$download_folder_path"/"$target_triple"/"$relative_file_path"
}

download_rust_distribution_file()
{
	local date="$1"
	local file_name="$2"
	local target_triple="$3"
	
	local relative_folder_path="$distribution_root_folder"/"$date"
	local url=https://"$distribution_server"/"$relative_folder_path"/"$file_name"
		
	download_url "$url" "$relative_folder_path" "$target_triple"
	download_url "$url".sha256 "$relative_folder_path" "$target_triple"
	download_url "$url".asc "$relative_folder_path" "$target_triple"
}

download_rust_distribution_file_noarch()
{
	download_rust_distribution_file "$1" "$2" 'noarch'
}

download_rust_manifest_v2()
{
	# eg 2021-06-01
	local date="$1"
	
	# eg nightly
	local channel="$2"
	
	download_rust_distribution_file_noarch "$date" channel-rust-"$channel".toml
}

download_rust_source_component()
{
	# eg 2021-06-01
	local date="$1"
	
	# eg nightly
	local channel="$2"
	
	# eg rustc
	local component="$3"
	
	download_rust_distribution_file_noarch "$date" "$component"-"$channel".tar.xz
}

download_rust_build_binary_component()
{
	# eg 2021-06-01
	local date="$1"
	
	# eg nightly
	local channel="$2"
	
	# eg rustc
	local component="$3"
	
	# eg x86_64-apple-darwin
	local target_triple="$4"
	
	download_rust_distribution_file "$date" "$component"-"$channel"-"$target_triple".tar.xz "$target_triple"
}

download_rust_target_binary_component()
{
	# eg 2021-06-01
	local date="$1"
	
	# eg nightly
	local channel="$2"
	
	# eg rustc
	local component="$3"
	
	# eg x86_64-apple-darwin
	local target_triple="$4"
	
	download_rust_distribution_file "$date" "$component"-"$channel"-"$target_triple".tar.xz 'noarch'
}

download_rust_files_for_target_triple()
{
	local target_triple="$1"
	local date="$2"
	local channel="$3"
	
	download_rust_source_component "$date" "$channel" rust-src
	
	# Omitted: miri-preview rust rustc-dev rls
	local build_binary_component
	for build_binary_component in cargo clippy llvm-tools rust-analyzer rust-docs rust-mingw rustc rustfmt
	do
		download_rust_build_binary_component "$date" "$channel" "$build_binary_component" "$target_triple"
	done
	
	local target_binary_component
	for target_binary_component in rust-analysis rust-std
	do
		download_rust_target_binary_component "$date" "$channel" "$target_binary_component" "$target_triple"
	done
}

loop_over_target_triples()
{
	local callback="$1"
	shift 1
	
	local target_triples_file_path="$configuration_folder_path"/target-triples
	exit_if_configuration_file_missing "$target_triples_file_path"

	local target_triple
	local junk
	while IFS=' ' read -r target_triple junk
	do
		case "$target_triple" in
		
			'')
				continue
			;;
	
			'#'*)
				continue
			;;
	
			*)
				:
			;;
		
		esac
		
		$callback "$target_triple" "$@"
	done <"$target_triples_file_path"
}

download_target_triples()
{
	local channel="$1"
	
	local nightly_dates_file_path="$configuration_folder_path"/"$channel"-dates
	exit_if_configuration_file_missing "$nightly_dates_file_path"
	
	loop_over_target_triples download_rustup_init
	
	local date
	while IFS=' ' read -r date junk
	do
		case "$date" in
			
			'')
				continue
			;;
		
			'#'*)
				continue
			;;
		
			*)
				:
			;;
			
		esac

		download_rust_manifest_v2 "$date" "$channel"
		
		loop_over_target_triples download_rust_files_for_target_triple "$date" "$channel"
		
	done <"$nightly_dates_file_path"
}

guard_arguments()
{
	case $# in
		
		1)
			case "$1" in
				
				-h|-help|--help|help)
					exit_help_message "Downloads rust binaries, components and sources suitable for use in constructing a container"
				;;
				
				*)
					:
				;;
				
			esac
		;;
		
		*)
			:
		;;
		
	esac
}

main()
{
	guard_arguments "$@"
	
	local source_folder_path
	local output_folder_path
	local temporary_folder_path
	set_paths
	
	rust_common_initialize "$source_folder_path"/upstream/rust
	
	prepare
	
	download_target_triples 'nightly'
}

main "$@"
