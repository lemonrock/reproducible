#!/usr/bin/env sh
# This file is part of reproducible-rust. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/reproducible-rust/master/COPYRIGHT. No part of reproducible-rust, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2021 The developers of reproducible-rust. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/reproducible-rust/master/COPYRIGHT.


set -e
set -u
set -f

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi

	else

		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}

		# pdksh / mksh have problems with unsetting a variable that was never set...
		if [ "${CDPATH+set}" = 'set' ]; then
			unset CDPATH
		fi

		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"

				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				local recursionDepth=0
				_program_path_resolve_symlinks_recursively()
				{
					local unresolvedPath="$1"
					
					recursionDepth=$((recursionDepth + 1))
					
					if [ $recursionDepth -gt 10 ]; then
						printf '%s\n' 'Recursion to depths greater than 10 is not allowed when resolving links.'
						return 1
					fi
					
					local potentialLinkDestination="$(readlink -- "$unresolvedPath")"
					
					if [ -z "$potentialLinkDestination" ]; then
						scriptPath="$unresolvedPath"
						return 0
					fi
					local linkDestination="$potentialLinkDestination"
					local parentFolderPath="${unresolvedPath%/*}"
					
					if [ "$parentFolderPath" = "$unresolvedPath" ]; then
						_program_path_resolve_symlinks_recursively "$linkDestination"
					else
						case "$linkDestination" in
														
							/*)
								_program_path_resolve_symlinks_recursively "$linkDestination"
							;;
							
							*)
								_program_path_resolve_symlinks_recursively "$parentFolderPath"/"$linkDestination"
							;;
							
						esac
					fi
				}

				scriptPath="$0"
				_program_path_resolve_symlinks_recursively "$scriptPath"

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"

				_program_path_find_parentPath
				pwd -P
			)
		fi

	fi
}

cd "$(_program_path_find)" 1>/dev/null 2>/dev/null

. common.sh
. common.inside-docker.sh
. rust.sh

depends mv rmdir
move_files_into_place()
{
	local noarch_download_folder_path="$download_folder_path"/noarch
	local target_specific_download_folder_path="$download_folder_path"/"$target_triple"
	
	local date
	while IFS=' ' read -r date junk
	do
		case "$date" in
			
			'')
				continue
			;;
		
			'#'*)
				continue
			;;
		
			*)
				:
			;;
			
		esac
		
		local folder="$noarch_download_folder_path"/"$distribution_root_folder"/"$date"
		set +f
			local file
			for file in "$folder"/*
			do
				set -f
				if [ ! -e "$file" ]; then
					continue
				fi
				
				mv "$file" "$target_specific_download_folder_path"/"$distribution_root_folder"/"$date"
			done
		set -f
	
		rmdir "$folder"
			
	done <"$nightly_dates_file_path"
	
	rmdir "$noarch_download_folder_path"/"$distribution_root_folder"
	rmdir "$noarch_download_folder_path"
	
	mv "$target_specific_download_folder_path" "$server_folder_path"
	
	rmdir "$download_folder_path"
}

find_first_date()
{
	local date
	while IFS=' ' read -r date junk
	do
		case "$date" in
			
			'')
				continue
			;;
		
			'#'*)
				continue
			;;
		
			*)
				first_date="$date"
				return 0
			;;
			
		esac
			
	done <"$nightly_dates_file_path"
}

main()
{
	local distribution_server
	local distribution_root_folder
	local configuration_folder_path
	local download_folder_path
	local rustup_version
	rust_common_initialize "$(pwd)"/rust
	
	local architecture
	convert_target_platform
	
	local target_triple="$architecture"-unknown-linux-musl
	
	local nightly_dates_file_path="$configuration_folder_path"/'nightly'-dates
	exit_if_configuration_file_missing "$nightly_dates_file_path"
	
	local server_folder_path="$(pwd)"/rust/server
	move_files_into_place
	
	local first_date
	find_first_date

	"$server_folder_path"/rustup/archive/"$rustup_version"/"$target_triple"/rustup-init --quiet -y --no-update-default-toolchain --no-modify-path --default-host "$target_triple" --default-toolchain 'nightly'-"$first_date" --profile minimal
}

main "$@"
